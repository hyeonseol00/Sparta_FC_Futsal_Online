generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model match_history {
  match_id                           Int      @id @default(autoincrement())
  user_id_a                          String
  user_id_b                          String
  team_id_a                          Int
  team_id_b                          Int
  result_a                           String
  result_b                           String
  score_change_a                     Int
  score_change_b                     Int
  match_time                         DateTime @default(now())
  team_a_score                       Int
  team_b_score                       Int
  team_match_history_team_id_aToteam team     @relation("match_history_team_id_aToteam", fields: [team_id_a], references: [team_id])
  team_match_history_team_id_bToteam team     @relation("match_history_team_id_bToteam", fields: [team_id_b], references: [team_id])
  user_match_history_user_id_aTouser user     @relation("match_history_user_id_aTouser", fields: [user_id_a], references: [user_id])
  user_match_history_user_id_bTouser user     @relation("match_history_user_id_bTouser", fields: [user_id_b], references: [user_id])

  @@index([team_id_a], map: "match_history_team_id_a_fkey")
  @@index([team_id_b], map: "match_history_team_id_b_fkey")
  @@index([user_id_a], map: "match_history_user_id_a_fkey")
  @@index([user_id_b], map: "match_history_user_id_b_fkey")
}

model owning_player {
  owning_player_id                     Int    @id @default(autoincrement())
  user_id                              String
  player_id                            Int
  grade                                Int
  count                                Int    @default(1)
  player                               player @relation(fields: [player_id, grade], references: [player_id, grade], onDelete: Cascade)
  user                                 user   @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  team_team_defender_idToowning_player team[] @relation("team_defender_idToowning_player")
  team_team_keeper_idToowning_player   team[] @relation("team_keeper_idToowning_player")
  team_team_striker_idToowning_player  team[] @relation("team_striker_idToowning_player")

  @@index([player_id, grade], map: "owning_player_player_id_grade_fkey")
  @@index([user_id], map: "owning_player_user_id_fkey")
}

model player {
  player_id     Int             @unique @default(autoincrement())
  player_name   String
  speed         Int
  goal_decision Int
  shoot_power   Int
  defence       Int
  stamina       Int
  grade         Int             @default(1)
  owning_player owning_player[]
  tournament    tournament[]

  @@id([player_id, grade])
}

model record {
  user_id String @id
  score   Int    @default(1000)
  win     Int    @default(0)
  lose    Int    @default(0)
  draw    Int    @default(0)
  rank    Int
  user    user   @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model team {
  team_id                                          Int                @id @default(autoincrement())
  user_id                                          String
  defender_id                                      Int
  striker_id                                       Int
  keeper_id                                        Int
  match_history_match_history_team_id_aToteam      match_history[]    @relation("match_history_team_id_aToteam")
  match_history_match_history_team_id_bToteam      match_history[]    @relation("match_history_team_id_bToteam")
  owning_player_team_defender_idToowning_player    owning_player      @relation("team_defender_idToowning_player", fields: [defender_id], references: [owning_player_id], onDelete: Cascade)
  owning_player_team_keeper_idToowning_player      owning_player      @relation("team_keeper_idToowning_player", fields: [keeper_id], references: [owning_player_id], onDelete: Cascade)
  owning_player_team_striker_idToowning_player     owning_player      @relation("team_striker_idToowning_player", fields: [striker_id], references: [owning_player_id], onDelete: Cascade)
  user                                             user               @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  tournament                                       tournament[]
  tournament_entry                                 tournament_entry[]
  tournament_match_tournament_match_teamA_idToteam tournament_match[] @relation("tournament_match_teamA_idToteam")
  tournament_match_tournament_match_teamB_idToteam tournament_match[] @relation("tournament_match_teamB_idToteam")

  @@index([defender_id], map: "team_defender_id_fkey")
  @@index([keeper_id], map: "team_keeper_id_fkey")
  @@index([striker_id], map: "team_striker_id_fkey")
  @@index([user_id], map: "team_user_id_fkey")
}

model tournament {
  tournament_id       Int                @id @unique(map: "tournament_id_UNIQUE") @default(autoincrement())
  scheduled_time      DateTime           @db.DateTime(0)
  winner_team_id      Int?
  reward_player_id    Int
  reward_player_grade Int
  current_round       String             @default("quater")
  player              player             @relation(fields: [reward_player_id, reward_player_grade], references: [player_id, grade], onDelete: NoAction, onUpdate: NoAction, map: "reward_player_id_fkey")
  team                team?              @relation(fields: [winner_team_id], references: [team_id], onDelete: NoAction, onUpdate: NoAction, map: "winner_team_id_fkey")
  tournament_entry    tournament_entry[]
  tournament_match    tournament_match[]

  @@index([reward_player_id, reward_player_grade], map: "reward_player_id_fkey_idx")
  @@index([winner_team_id], map: "winner_team_id_fkey_idx")
}

model tournament_entry {
  tournament_entry_id Int        @id @default(autoincrement())
  tournament_id       Int
  team_id             Int
  ready               Int        @default(0) @db.TinyInt
  team                team       @relation(fields: [team_id], references: [team_id], onDelete: NoAction, onUpdate: NoAction, map: "entry_team_id_fkey")
  tournament          tournament @relation(fields: [tournament_id], references: [tournament_id], onDelete: NoAction, onUpdate: NoAction, map: "tournament_entry_id_fkey")

  @@index([team_id], map: "entry_team_id_fkey")
  @@index([tournament_id], map: "tournament_entry_id_fkey")
}

model tournament_match {
  tournament_match_id                  Int        @id @default(autoincrement())
  tournament_id                        Int
  roundName                            String     @default("quater")
  teamA_id                             Int?
  teamB_id                             Int?
  team_tournament_match_teamA_idToteam team?      @relation("tournament_match_teamA_idToteam", fields: [teamA_id], references: [team_id], onDelete: NoAction, onUpdate: NoAction, map: "team_a_match_id_fkey")
  team_tournament_match_teamB_idToteam team?      @relation("tournament_match_teamB_idToteam", fields: [teamB_id], references: [team_id], onDelete: NoAction, onUpdate: NoAction, map: "team_b_match_id_fkey")
  tournament                           tournament @relation(fields: [tournament_id], references: [tournament_id], onDelete: NoAction, onUpdate: NoAction, map: "tournament_match_id_fkey")

  @@index([teamA_id], map: "team_a_match_id_fkey")
  @@index([teamB_id], map: "team_b_match_id_fkey")
  @@index([tournament_id], map: "tournament_match_id_fkey")
}

model user {
  user_id                                     String          @id
  user_name                                   String          @unique
  user_pw                                     String
  cash                                        Int             @default(10000)
  match_history_match_history_user_id_aTouser match_history[] @relation("match_history_user_id_aTouser")
  match_history_match_history_user_id_bTouser match_history[] @relation("match_history_user_id_bTouser")
  owning_player                               owning_player[]
  record                                      record?
  team                                        team[]
}
