generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  userId        String         @id @map("user_id")
  userName      String         @unique @map("user_name")
  userPw        String         @map("user_pw")
  cash          Int            @default(10000) @map("cash")
  matchHistoryA matchHistory[] @relation("userMatches")
  matchHistoryB matchHistory[] @relation("opponentMatches")
  owningPlayer  owningPlayer[]
  record        record?
  team          team[]

  @@map("user")
}

model player {
  playerId     Int            @unique @default(autoincrement()) @map("player_id")
  playerName   String         @map("player_name")
  speed        Int            @map("speed")
  goalDecision Int            @map("goal_decision")
  shootPower   Int            @map("shoot_power")
  defence      Int            @map("defence")
  stamina      Int            @map("stamina")
  grade        Int            @default(1) @map("grade")
  owningPlayer owningPlayer[]
  tournament   tournament[]

  @@id([playerId, grade])
  @@map("player")
}

model owningPlayer {
  owningPlayerId Int    @id @default(autoincrement()) @map("owning_player_id")
  userId         String @map("user_id")
  playerId       Int    @map("player_id")
  grade          Int    @map("grade")
  count          Int    @default(1) @map("count")
  player         player @relation(fields: [playerId, grade], references: [playerId, grade], onDelete: Cascade)
  user           user   @relation(fields: [userId], references: [userId], onDelete: Cascade)
  defender       team[] @relation("DefenderRelation")
  keeper         team[] @relation("KeeperRelation")
  striker        team[] @relation("StrikerRelation")

  @@index([playerId, grade], map: "owning_player_player_id_grade_fkey")
  @@index([userId], map: "owning_player_user_id_fkey")
  @@map("owning_player")
}

model team {
  teamId                                           Int                @id @default(autoincrement()) @map("team_id")
  userId                                           String             @map("user_id")
  defenderId                                       Int                @map("defender_id")
  strikerId                                        Int                @map("striker_id")
  keeperId                                         Int                @map("keeper_id")
  matchHistoryAsA                                  matchHistory[]     @relation("teamAMatches")
  matchHistoryAsB                                  matchHistory[]     @relation("teamBMatches")
  defender                                         owningPlayer       @relation("DefenderRelation", fields: [defenderId], references: [owningPlayerId], onDelete: Cascade)
  keeper                                           owningPlayer       @relation("KeeperRelation", fields: [keeperId], references: [owningPlayerId], onDelete: Cascade)
  striker                                          owningPlayer       @relation("StrikerRelation", fields: [strikerId], references: [owningPlayerId], onDelete: Cascade)
  user                                             user               @relation(fields: [userId], references: [userId], onDelete: Cascade)
  tournament                                       tournament[]
  tournament_entry                                 tournament_entry[]
  tournament_match_tournament_match_teamA_idToteam tournament_match[] @relation("tournament_match_teamA_idToteam")
  tournament_match_tournament_match_teamB_idToteam tournament_match[] @relation("tournament_match_teamB_idToteam")

  @@index([defenderId], map: "team_defender_id_fkey")
  @@index([keeperId], map: "team_keeper_id_fkey")
  @@index([strikerId], map: "team_striker_id_fkey")
  @@index([userId], map: "team_user_id_fkey")
  @@map("team")
}

model record {
  userId String @id @map("user_id")
  score  Int    @default(1000) @map("score")
  win    Int    @default(0) @map("win")
  lose   Int    @default(0) @map("lose")
  draw   Int    @default(0) @map("draw")
  rank   Int    @map("rank")
  user   user   @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("record")
}

model matchHistory {
  matchId      Int      @id @default(autoincrement()) @map("match_id")
  userIdA      String   @map("user_id_a")
  userIdB      String   @map("user_id_b")
  teamIdA      Int      @map("team_id_a")
  teamIdB      Int      @map("team_id_b")
  resultA      String   @map("result_a")
  resultB      String   @map("result_b")
  scoreChangeA Int      @map("score_change_a")
  scoreChangeB Int      @map("score_change_b")
  matchTime    DateTime @default(now()) @map("match_time")
  teamA        team     @relation("teamAMatches", fields: [teamIdA], references: [teamId])
  teamB        team     @relation("teamBMatches", fields: [teamIdB], references: [teamId])
  userA        user     @relation("userMatches", fields: [userIdA], references: [userId])
  userB        user     @relation("opponentMatches", fields: [userIdB], references: [userId])

  @@index([teamIdA], map: "match_history_team_id_a_fkey")
  @@index([teamIdB], map: "match_history_team_id_b_fkey")
  @@index([userIdA], map: "match_history_user_id_a_fkey")
  @@index([userIdB], map: "match_history_user_id_b_fkey")
  @@map("match_history")
}

model tournament {
  tournament_id       Int                @id @unique(map: "tournament_id_UNIQUE") @default(autoincrement())
  scheduled_time      DateTime           @db.DateTime(0)
  winner_team_id      Int?
  reward_player_id    Int
  reward_player_grade Int
  player              player             @relation(fields: [reward_player_id, reward_player_grade], references: [playerId, grade], onDelete: NoAction, onUpdate: NoAction, map: "reward_player_id_fkey")
  team                team?              @relation(fields: [winner_team_id], references: [teamId], onDelete: NoAction, onUpdate: NoAction, map: "winner_team_id_fkey")
  tournament_entry    tournament_entry[]
  tournament_match    tournament_match[]

  @@index([reward_player_id, reward_player_grade], map: "reward_player_id_fkey_idx")
  @@index([winner_team_id], map: "winner_team_id_fkey_idx")
}

model tournament_entry {
  tournament_entry_id Int        @id @default(autoincrement())
  tournament_id       Int
  team_id             Int
  ready               Int        @default(0) @db.TinyInt
  team                team       @relation(fields: [team_id], references: [teamId], onDelete: NoAction, onUpdate: NoAction, map: "entry_team_id_fkey")
  tournament          tournament @relation(fields: [tournament_id], references: [tournament_id], onDelete: NoAction, onUpdate: NoAction, map: "tournament_entry_id_fkey")

  @@index([team_id], map: "entry_team_id_fkey")
  @@index([tournament_id], map: "tournament_entry_id_fkey")
}

model tournament_match {
  tournament_match_id                  Int        @id @default(autoincrement())
  tournament_id                        Int
  roundName                            String     @default("quater")
  teamA_id                             Int
  teamB_id                             Int
  team_tournament_match_teamA_idToteam team       @relation("tournament_match_teamA_idToteam", fields: [teamA_id], references: [teamId], onDelete: NoAction, onUpdate: NoAction, map: "team_a_match_id_fkey")
  team_tournament_match_teamB_idToteam team       @relation("tournament_match_teamB_idToteam", fields: [teamB_id], references: [teamId], onDelete: NoAction, onUpdate: NoAction, map: "team_b_match_id_fkey")
  tournament                           tournament @relation(fields: [tournament_id], references: [tournament_id], onDelete: NoAction, onUpdate: NoAction, map: "tournament_match_id_fkey")

  @@index([tournament_id], map: "tournament_match_id_fkey")
  @@index([teamA_id], map: "team_a_match_id_fkey")
  @@index([teamB_id], map: "team_b_match_id_fkey")
}
